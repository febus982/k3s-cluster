---
- name: Create config directory
  ansible.builtin.file:
    path: /etc/rancher/k3s
    state: directory
  become: yes

- name: Copy K3S config file
  ansible.builtin.template:
    src: "{{ role_path }}/templates/config.yaml.j2"
    dest: /etc/rancher/k3s/config.yaml
  become: yes

- name: Check if HA mode with integrated datastore
  set_fact:
    ha_integrated_datastore: "{{ groups['master'] | length | int > 1 and k3s_datastore_endpoint is not defined }}"

- debug:
    var: ha_integrated_datastore

- name: Check if cluster has been initialised
  stat:
    path: "{{ playbook_dir }}/../../node-token"
  register: node_token_stat_result
  delegate_to: localhost
  become: false

# Note: add option to force reinstallation
- name: Check if cluster needs initialisation
  set_fact:
    cluster_needs_init: "{{ not node_token_stat_result.stat.exists }}"

- debug:
    var: cluster_needs_init

- name: Install K3S Master (HA with integrated datastore)
  ansible.builtin.shell:
    cmd: >
      curl -sfL https://get.k3s.io |
      {{ 'K3S_CLUSTER_INIT=true' if cluster_needs_init else 'K3S_URL=https://' + control_plane_floating_ip + ':6443' }}
      INSTALL_K3S_EXEC=server
      sh -
    creates: /etc/rancher/k3s/k3s.yaml
  when: ha_integrated_datastore

- name: Install K3S Master (Single master or HA with external datastore)
  ansible.builtin.shell:
    cmd: "curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC=server sh -"
    creates: /etc/rancher/k3s/k3s.yaml
  when: not ha_integrated_datastore

- name: Wait for K3S config
  wait_for:
    path: /etc/rancher/k3s/k3s.yaml

##### Persist node-token file (necessary for agent init)
- name: Fetch node-token
  ansible.builtin.fetch:
    src: /var/lib/rancher/k3s/server/node-token
    dest: "{{ playbook_dir }}/../../node-token"
    flat: yes
  become: true
  when: cluster_needs_init

- include_role:
    name: kube-vip
  when: cluster_needs_init

##### Recover external kubeconfig
- name: Copy kubeconfig file to tmp directory
  copy:
    src: /etc/rancher/k3s/k3s.yaml
    dest: /tmp/kubeconfig
    remote_src: yes
  when: cluster_needs_init

- name: "Replace https://localhost:6443 with https://{{ control_plane_floating_ip }}:6443"
  ansible.builtin.command: >-
    k3s kubectl config set-cluster default
      --server=https://{{ control_plane_floating_ip }}:6443
      --kubeconfig /tmp/kubeconfig
  changed_when: true
  when: cluster_needs_init

- name: Fetch kubeconfig
  ansible.builtin.fetch:
    src: /tmp/kubeconfig
    dest: "{{ playbook_dir }}/../../kubeconfig.yml"
    flat: yes
  when: cluster_needs_init

- name: Remove temp kubeconfig
  ansible.builtin.file:
    path: /tmp/kubeconfig
    state: absent
  when: cluster_needs_init
...
